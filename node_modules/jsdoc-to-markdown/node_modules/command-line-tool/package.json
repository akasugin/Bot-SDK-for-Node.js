{
  "name": "command-line-tool",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "version": "0.7.0",
  "description": "command-line-tool",
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/command-line-tool.git"
  },
  "license": "MIT",
  "main": "lib/command-line-tool.js",
  "keywords": [],
  "engines": {
    "node": ">=4.0.0"
  },
  "scripts": {
    "test": "test-runner test/*.js",
    "docs": "jsdoc2md -t jsdoc2md/README.hbs lib/*.js > README.md; echo"
  },
  "dependencies": {
    "ansi-escape-sequences": "^3.0.0",
    "array-back": "^1.0.4",
    "command-line-args": "^4.0.1",
    "command-line-usage": "^4.0.0",
    "typical": "^2.6.0"
  },
  "devDependencies": {
    "jsdoc-to-markdown": "^2.0.1",
    "test-runner": "^0.3.0"
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/command-line-tool.svg)](https://www.npmjs.org/package/command-line-tool)\n[![npm module downloads](http://img.shields.io/npm/dt/command-line-tool.svg)](https://www.npmjs.org/package/command-line-tool)\n[![Build Status](https://travis-ci.org/75lb/command-line-tool.svg?branch=master)](https://travis-ci.org/75lb/command-line-tool)\n[![Dependency Status](https://david-dm.org/75lb/command-line-tool.svg)](https://david-dm.org/75lb/command-line-tool)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n\n<a name=\"module_command-line-tool\"></a>\n\n## command-line-tool\nSome conventional operations used in command-line tools.\n\n**Example**  \n```js\nconst tool = require('command-line-tool')\n```\n\n* [command-line-tool](#module_command-line-tool)\n    * [.stop([message])](#module_command-line-tool.stop)\n    * [.printError(message)](#module_command-line-tool.printError)\n    * [.printOutput(message)](#module_command-line-tool.printOutput)\n    * [.halt([err], [options])](#module_command-line-tool.halt)\n    * [.getCli(definitions, [usageSections], [argv])](#module_command-line-tool.getCli) ⇒ <code>object</code>\n\n<a name=\"module_command-line-tool.stop\"></a>\n\n### tool.stop([message])\nPrint the supplied messages then stop the process (no exit code).\n\n**Kind**: static method of <code>[command-line-tool](#module_command-line-tool)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [message] | <code>string</code> &#124; <code>Array.&lt;string&gt;</code> | One or more messages to be written to stderr before exiting. May contain `ansi.format` markup. |\n\n<a name=\"module_command-line-tool.printError\"></a>\n\n### tool.printError(message)\nPrints one or more strings in red to stderr.\n\n**Kind**: static method of <code>[command-line-tool](#module_command-line-tool)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| message | <code>string</code> &#124; <code>Array.&lt;string&gt;</code> | input message(s) |\n\n<a name=\"module_command-line-tool.printOutput\"></a>\n\n### tool.printOutput(message)\nPrints one or more strings to stdout. Catches unwanted EPIPE error.\n\n**Kind**: static method of <code>[command-line-tool](#module_command-line-tool)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| message | <code>string</code> &#124; <code>Array.&lt;string&gt;</code> | input message(s) |\n\n<a name=\"module_command-line-tool.halt\"></a>\n\n### tool.halt([err], [options])\nStop the process with an error message.\n\n**Kind**: static method of <code>[command-line-tool](#module_command-line-tool)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [err] | <code>Error</code> | the error instance |\n| [options] | <code>object</code> |  |\n| [options.exitCode] | <code>number</code> | defaults to 1 |\n| [options.stack] | <code>boolean</code> | defaults to false |\n\n<a name=\"module_command-line-tool.getCli\"></a>\n\n### tool.getCli(definitions, [usageSections], [argv]) ⇒ <code>object</code>\nParse the command-line options.\n\n**Kind**: static method of <code>[command-line-tool](#module_command-line-tool)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| definitions | <code>Array.&lt;OptionDefinitions&gt;</code> | to be passed to command-line-args |\n| [usageSections] | <code>Array.&lt;section&gt;</code> | to be passed to command-line-usage |\n| [argv] | <code>Array.&lt;string&gt;</code> | If supplied, this `argv` array is parsed instead of `process.argv`. |\n\n\n* * *\n\n&copy; 2015-17 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/command-line-tool/issues"
  },
  "_id": "command-line-tool@0.7.0",
  "dist": {
    "shasum": "be876cec75e64d6e37e46416a26b5d60a2a109c5"
  },
  "_from": "command-line-tool@^0.7.0",
  "_resolved": "https://registry.npmjs.org/command-line-tool/-/command-line-tool-0.7.0.tgz"
}
